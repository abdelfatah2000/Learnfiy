components:
  securitySchemes:
    Bearer:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    User:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          description: The user's name.
          required: true
        email:
          type: string
          description: The user's email address.
          format: email
          required: true
        password:
          type: string
          description: The user's password.
          required: true
        role:
          type: string
          enum: ['student', 'admin', 'instructor']
          description: The user's role.
    Instructor:
      type: object
      required:
        - name
        - email
        - salary
        
    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: The user's email address.
          format: email
          required: true
          default: ta7a@gmail.com
        password:
          type: string
          description: The user's password.
          required: true
          default: 123456AmH
    Error:
      type: object
      properties:
        message:
          type: string
        success:
          type: boolean
          default: false

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Email already taken
            success: false
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Please authenticate
            success: false

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Forbidden
            success: false
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Not found
            success: false

/api/auth/register:
  post:
    summary: Create a new user
    tags: [User]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    responses:
      '201':
        description: User created successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      '400':
        $ref: '#/components/responses/DuplicateEmail'

/api/auth/verify-email/{userID}/{token}:
  post:
    summary: 'Verify user email'
    tags: [User]
    parameters:
      - in: path
        name: userID
        required: true
        description: The ID of the user
        type: string
      - in: path
        name: token
        required: true
        description: The token stored in database
        type: string
    responses:
      200:
        description: Email is verified
      401:
        description: verify email failed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              message: verify email failed.
              success: false

/api/auth/login:
  post:
    summary: 'User login'
    tags: [User]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Login'
    responses:
      200:
        schema:
          $ref: '#/components/schemas/User'
      400:
        description: Invalid email or password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              message: Invalid email or password
              success: false

/api/admin/get-all-users:
  get:
    summary: 'Get all users'
    tags: [Admin]
    security:
      - Bearer: []
    parameters:
      - in: query
        name: limit
        schema:
          type: integer
          minimum: 1
          default: 10
          description: Maximum number of documents per page
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
          description: Page number
      - in: query
        name: active
        schema:
          type: boolean
        description: User verify account or not
      - in: query
        name: role
        schema:
          type: string
          enum:
            - admin
            - student
            - instructor
      - in: query
        name: fields
        schema:
          type: string
    responses:
      200:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                results:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
                pagination:
                  type: object
                  properties:
                    page:
                      type: integer
                      example: 1
                    pages:
                      type: integer
                      example: 100
                    count:
                      type: integer
                      example: 1000
                message:
                  type: string
                  example: Successfully found all documents
      401:
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      403:
        description: Forbidden
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

/api/admin/get-users-to-accept:
  get:
    summary: 'Get all users that needs accept from admin'
    tags: [Admin]
    security:
      - Bearer: []
    parameters:
      - in: query
        name: page
        schema:
          type: integar
          minimum: 1
          default: 1
          description: Page number
      - in: query
        name: limit
        schema:
          type: integer
          minimum: 10
          default: 10
          description: Maximum number of documents per page
      - in: query
        name: role
        schema:
          type: string
          enum:
            - student
            - instructor
      - in: query
        name: active
        schema:
          type: boolean
    responses:
      200:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                results:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
                pagination:
                  type: object
                  properties:
                    page:
                      type: integer
                      example: 1
                    pages:
                      type: integer
                      example: 100
                    count:
                      type: integer
                      example: 1000
                message:
                  type: string
                  example: Successfully found all documents
      401:
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      403:
        description: Forbidden
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

/api/admin/accept-new-users:
  post:
    summary: Accept new user's
    tags: [Admin]
    security:
      - Bearer: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              users:
                type: array
                items:
                  id:
                    type: string
