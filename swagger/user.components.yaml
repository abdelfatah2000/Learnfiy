components:
  securitySchemes:
    Bearer:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    User:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          description: The user's name.
          required: true
        email:
          type: string
          description: The user's email address.
          format: email
          required: true
        password:
          type: string
          description: The user's password.
          required: true
        role:
          type: string
          enum: ['student', 'admin', 'instructor']
          description: The user's role.
    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: The user's email address.
          format: email
          required: true
          default: ta7a@gmail.com
        password:
          type: string
          description: The user's password.
          required: true
          default: 123456AmH
    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        success:
          type: boolean
          default: false

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
            success: false
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
            success: false

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
            success: false
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found
            success: false

/api/auth/register:
  post:
    summary: Create a new user
    tags: [User]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    responses:
      '201':
        description: User created successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      '400':
        $ref: '#/components/responses/DuplicateEmail'

/api/auth/verify-email/{userID}/{token}:
  post:
    summary: 'Verify user email'
    tags: [User]
    parameters:
      - in: path
        name: userID
        required: true
        description: The ID of the user
        type: string
      - in: path
        name: token
        required: true
        description: The token stored in database
        type: string
    responses:
      200:
        description: Email is verified
      401:
        description: verify email failed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              code: 401
              message: verify email failed.
              success: false

/api/auth/login:
  post:
    summary: 'User login'
    tags: [User]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Login'
    responses:
      200:
        schema:
          $ref:
      401:
        description: Invalid email or password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              code: 401
              message: Invalid email or password
              success: false

/api/admin/get-all-users:
  get:
    summary: 'Get all users'
    tags: [Admin]
    security:
      - Bearer: []
    responses:
      200:
        description: OK

/api/admin/get-users-to-accept:
  get:
    summary: 'Get all users that needs accept from admin'
    tags: [Admin]
    security:
      - Bearer: []
    responses:
      200:
        description: OK
